import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Directory path where dataset is stored (update with your local path)
dataset_dir = '/content/drive/MyDrive/dataset'  # Update the path to your dataset folder

# Preprocess the dataset using ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,            # Normalize pixel values between 0 and 1
    rotation_range=40,         # Random rotation of images
    width_shift_range=0.2,     # Horizontal shifting of images
    height_shift_range=0.2,    # Vertical shifting of images
    shear_range=0.2,           # Shearing transformations
    zoom_range=0.2,            # Zooming transformations
    horizontal_flip=True,      # Randomly flip images horizontally
    fill_mode='nearest'       # Fill in missing pixels after transformations
)

train_generator = train_datagen.flow_from_directory(
    dataset_dir,              # Path to your dataset
    target_size=(128, 128),    # Resize images to 128x128
    batch_size=16,             # Number of images per batch
    class_mode='binary',       # Binary classification (dog vs cat)
    subset='training'          # For training data
)

# Define the CNN model architecture
model = models.Sequential()

# First convolutional layer
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)))
model.add(layers.MaxPooling2D((2, 2)))

# Second convolutional layer
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

# Third convolutional layer
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

# Flatten the feature maps to feed into dense layers
model.add(layers.Flatten())

# Fully connected layers
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))  # Output layer for binary classification (dog vs cat)

# Compile the model
model.compile(optimizer='adam', 
              loss='binary_crossentropy', 
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator, 
    epochs=10,  # Number of epochs
)

# Evaluate the model on training data
print("Training completed!")

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.title('Training Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
---------------------------------------second half code--------------------------------
import numpy as np
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# Function to preprocess the image
def prepare(filepath):
    img = image.load_img(filepath, target_size=(128, 128))  # Resize image
    img_array = image.img_to_array(img)  # Convert image to array
    img_array = img_array / 255.0  # Normalize the image
    return np.expand_dims(img_array, axis=0)  # Add batch dimension

# Load a single image to compare
new_image_path = '/content/drive/MyDrive/dataset/cat/cat1.jpg'  # Provide the path to the image
prepared_image = prepare(new_image_path)

# Predict using the trained model
prediction = model.predict(prepared_image)

# Display the image
img = image.load_img(new_image_path)
plt.imshow(img)
plt.axis('off')
plt.show()

# Interpret and display the result
if prediction[0] > 0.5:
    print("It's a Dog!")
else:
    print("It's a Cat!")
